var app = angular.module("tricosphere", [
    'ui.router',
    'angular-jwt',
    'ui.bootstrap',
    'angular-storage',
    'ui.router.state.events',
    'ngMessages'
]);



app.run(function($rootScope, $state) {
    $rootScope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
        console.log(from);
        $rootScope.prevState = from.name;
    });
});

app.run(function(authManager) {
    console.log('appel de authManager');
    authManager.checkAuthOnRefresh();
});

/** TOKEN DANS LE HEADER **/
app.config(function Config($httpProvider, jwtInterceptorProvider, jwtOptionsProvider) {
    $httpProvider.interceptors.push('authInterceptor');
});

app.constant("config", {
    "url": "http://localhost/tricosphere",
    "api": "http://localhost/tricosphere/api/index.php"
});

/*app.filter('capitalize', function() {
    return function(input) {
      return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
    };
});
*/


/** INTERCEPTOR POUR LA GESTION DU TOKEN **/
// A chaque requete, on envoit le token  auth dans le header s'il existe et s'il est valide
// Sinon, on redirige vers la page /login
angular
.module('tricosphere')
.factory('authInterceptor', function($rootScope, $q, store, $state, jwtHelper) {
    return {
            // Add authorization jwt to headers
            request: function(config) {
                config.headers = config.headers || {};
                if (store.get('auth')) {
                    config.headers.Authorization = 'Bearer ' + store.get('auth');
                    //config.headers.Authorization = 'Content-Type : application/json';
                }
                return config;
            },
            // Intercept 401s and redirect you to login
            responseError: function(response) {
                if (response.status === 401) {
                    $state.go('login');
                    if (!store.get('auth') || jwtHelper.isTokenExpired(store.get('auth'))) {
                        store.remove('auth');
                    }
                    return $q.reject(response);
                } else if (response.status === 404) {
                    $state.go('404');
                } else {
                    return $q.reject(response);
                }
            }
        };
    });

/**
factory pour savoir si l'utilisateur est bien authentifié ou non
**/
angular
.module('tricosphere')
.factory('auth', function(store, jwtHelper, $state, $http, $q) {
    return {
        init: function(response) {
            var authJWT = store.get('auth') || null;
            if(null !== authJWT && !jwtHelper.isTokenExpired(authJWT)) {
                $http({
                    method: 'GET',
                    url: 'http://localhost/tricosphere/api/index.php' + '/isValidToken'
                }).then(function successCallback(response) {
                }, function errorCallback(response) {
                    $state.go('login', {msg: 'Merci de vous athentifier.'});
                });
            } else {
                $state.go('login', {msg: 'Merci de vous athentifier.'});
            }
        },
        isAdmin: function() {
            var authJWT = store.get('auth');
            var token = jwtHelper.decodeToken(authJWT) || null;
            if(null !== token && token.role != 5 && !jwtHelper.isTokenExpired(authJWT)) {
                $http({
                    method: 'GET',
                    url: 'http://localhost/tricosphere/api/index.php' + '/isValidToken'
                }).then(function successCallback(response) {
                }, function errorCallback(response) {
                    $state.go('login', {msg: 'Merci de vous athentifier.'});
                });
            } else {
                $state.go('login', {msg: 'Vous devez être utilisateur pour accéder à cette page'});
            }  
        },
            // sur la page de login, s'il existe un token valide, alors on est redirigé vers la page home
            redirectOnLoginState: function() {
                var authJWT = store.get('auth') || null;
                if(null !== authJWT && !jwtHelper.isTokenExpired(authJWT)) {
                    $http({
                        method: 'GET',
                        url: 'http://localhost/tricosphere/api/index.php' + '/isValidToken'
                    }).then(function successCallback(response) {
                        $state.go('home', {msg: 'Welcome back!'});
                    }, function errorCallback(response) { });
                }
            },
            // exemple d'utilisation des promise
            linkOnUrlNotFound: function(response) {
                var deferred = $q.defer();
                $http({
                    method: 'GET',
                    url: 'http://localhost/tricosphere/api/index.php' + '/isValidToken'
                }).then(
                function successCallback(response) { deferred.resolve(true); }, 
                function errorCallback(response) { deferred.resolve(false); }
                );
                return deferred.promise;
            }
        };
    });


var mobileAndTabletcheck = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

app.config(function($stateProvider, $locationProvider, $urlRouterProvider) {



/*    $urlRouterProvider.otherwise( function($injector, $location) {
        var $state = $injector.get('$state');
        $state.go('login');
    });*/

    // ROUTES PROTEGEES par un ngInit dans les controllers
    $stateProvider.state('home', {
        url: '/home',
        templateUrl: 'app/components/home/home.html',
        controller: 'HomeCtrl',
        params: {
            msg: null
        }
        // on peut faire des appels à des fonctions avant que le controller n'entre en action
        // on y accede dans le controller en injectant (ici isAuth ou simpleObj)
/*        resolve: {
            isAuth: function(auth) {
                return auth.init();
            },
            simpleObj:  function(){
                return {value: 'simple!'};
             }
        }   */
    });   

    $stateProvider
        .state('merceries', {
            url: '/merceries',
            templateUrl: function ($stateParams) {
                if(mobileAndTabletcheck()) { 
                    return 'app/components/merceries/merceries.mobile.html';
                } else {
                    return 'app/components/merceries/merceries.html';
                }
            },
            controller: 'MerceriesCtrl'
        })
        .state('merceries-details', {
            url: '/details/:id',
            templateUrl: 'app/components/merceries/merceries.details.html'
        })
        .state('merceries-recherche', {
            url: '/merceries/recherche',
            templateUrl: 'app/components/merceries/merceries.recherche.html'
        })
        .state('merceries-gerer', {
            url: '/gerer',
            templateUrl: 'app/components/merceries/merceries.gerer.html'
        })
        .state('settings', {
            url: '/settings',
            templateUrl: 'app/components/settings/settings.html',
            controller: 'SettingsCtrl'
        })
        .state('admin', {
            url: '/admin',
            templateUrl: 'app/components/admin/admin.html',
            controller: 'AdminCtrl',
            params: {}
        })  
        .state('profil', {
            url: '/profil',
            templateUrl: 'app/components/profil/profil.html',
            controller: 'ProfilCtrl',
            params: {}
        });


    // ROUTES NON PROTEGEES
    $stateProvider    
        .state('loginRoot', {
            url: '',
            templateUrl: 'app/components/login/login.html',
            controller: 'LoginCtrl'
        })

        .state('login', {
            url: '/login',
            templateUrl: 'app/components/login/login.html',
            controller: 'LoginCtrl',
            params : {
                msgErr : null,
                msgOk : null,
                userEmail: null,
                userPwd: null
            }
        })

        .state('resetPassword', {
            url: '/resetPassword',
            templateUrl: 'app/components/resetPassword/resetPassword.html',
            controller: 'ResetPasswordCtrl'
        })

        .state('signup', {
            url: '/signup',
            templateUrl: 'app/components/signup/signup.html',
            controller: 'SignupCtrl'
        })

        .state('404', {
            url: '/404',
            templateUrl: 'app/components/404/404.html',
            controller: '404Ctrl'
        });


    $urlRouterProvider.otherwise('/404');

    //$locationProvider.html5Mode(true).hashPrefix('!');
    //$locationProvider.hashPrefix('');
});


angular
    .module('tricosphere')
    .service('name', ['', function(){
    	
    }]);
angular
    .module('tricosphere')
    .controller('404Ctrl', function($scope, $state, $rootScope, auth) {
    	
    	auth.init();

    	$scope.redirectLink = function(previousState) {
    		$state.go($rootScope.prevState);
    	};

    });

angular
    .module('tricosphere')
    .controller('AdminCtrl', function($rootScope, $scope, $http, store, $state, auth) {
    	auth.isAdmin();
    });

angular
    .module('tricosphere')
    .controller('HomeCtrl', function($rootScope, $scope, $http, store, $state, auth) {

        auth.init();

        $scope.getAllAcounts = function() {
            $http({
                method: 'GET',
                url: confg.api + '/toto'
            }).then(function successCallback(response) {
                console.log(response);
            }, function errorCallback(response) {
                console.log(response);
            });
        };

        $scope.removeAuth = function() {
            console.log('suppression du jwt \'auth\'');
            store.remove('auth');
        };

    });

angular
    .module('tricosphere')
    .controller('LoginCtrl', function($timeout, $scope, $state, store, $http, $stateParams, config, auth) {

        auth.redirectOnLoginState();

        // on recupere les data passés avec les state
        $scope.msgOk = $stateParams.msgOk || null;
        $scope.msgErr = $stateParams.msgErr || null;
        // effacement du message d'erreur / succes au bout define 3s
        if($scope.msgOk) { $timeout(function() { $scope.msgOk = null; }, 3000); }
        
        // lorsque qu'on est redirigé depuis la page signin
        //$scope.formLogin.data.email = $scope.userEmail ? $stateParams.userMail : null;
        //$scope.formLogin.data.pwd = $scope.userPwd ? $stateParams.userPwd : null;




        $scope.doLogin = function() {
            $http({
                method: 'POST',
                url: config.api + '/login',
                headers: {'Content-Type': 'application/json'},
                data: $scope.formLogin.data
            }).then(function successCallback(response) {
                store.set('auth', response.data.token);
                $state.go('home');
            }, function errorCallback(response) {
                $scope.msgErr = response.data.msg;
                $timeout(function() { $scope.msgErr = null; }, 3000);
            });
        };
    });

angular
    .module('tricosphere')
    .controller('MerceriesCtrl', function($rootScope, $scope, $http, store, $state, auth) {

        auth.init(); // page protégée

    // Recherche de merceries
        // par defaut, c'est la recherche par nom qui est selectionnée
        $scope.typeRechercheMercerie = "nom";



        $scope.merceries = [
            {
                id: 1,
                description: "Description de la mercerie n° 1",
                name: "azert",
                ville: "la rochelle"
            }, {
                id: 2,
                description: "Description de la mercerie n° 2",
                name: "qsdf",
                ville: "nantes"
            }, {
                id: 3,
                description: "Description de la mercerie n° 3",
                name: "wxcv",
                ville: "Lyon"
            }, {
                id: 4,
                description: "Description de la mercerie n° 4",
                name: "poiu",
                ville: "Strasbourg"
            }
        ];

        $scope.doRechercheMerceries = function() {

        };

});

angular
    .module('tricosphere')
    .controller('ProfilCtrl', function($scope, $http, $state, config, store, $stateParams) {

        
        
    });

angular
.module('tricosphere')
.controller('ResetPasswordCtrl', function($scope, $http, $state) {

	$scope.doResetPassword = function() {
		// TODO : reset Password via http POST
		$state.go('login');
	};
});
angular
    .module('tricosphere')
    .controller('SettingsCtrl', function($scope, auth) {

        auth.init();
        
    });

angular
    .module('tricosphere')
    .controller('SignupCtrl', function($scope, $http, $state, config, store, $stateParams) {


    	$scope.msg = null;

        $scope.doSignUp = function() {
        	console.log( $scope.formSignup.data);
            if ($scope.formSignup.pwd1 === $scope.formSignup.pwd2) {
                $http({
                    method: 'POST',
                    url: config.api + '/signup',
                    data: $scope.formSignup.data
                }).then(function successCallback(response) {
                    store.set('auth', response.data);
                    $state.go('login', {msgOk: response.data.msg, userEmail: $scope.formSignup.data.email, userPwd: $scope.formSignup.data.pwd1});
                    console.log(response);
                }, function errorCallback(response) {
                    console.log(response);
                });
            } else {
                $scope.msg = "Les deux mots de passe doivent être identiques";
            }
        };

        
    });

angular
    .module('tricosphere')
    .controller('NavbarCtrl', function($timeout, $scope, $state, store, $http, $stateParams, config) {

        $scope.doDeconnect = function() {
            store.remove('auth');
            $state.go('login', {msgOk: 'Vous avez bien été déconnecté'});
        };

        $scope.menuItems =  [
                {
                    text: "Merceries",
                    link: "#!/merceries"
                },
                {
                    text: "Designers",
                    link: "#!/designers"
                },
                {
                    text: "Communauté",
                    link: "#!/community"
                },
                {
                    text: "Réglages",
                    link: "#!/settings"
                },
                {
                    text: "Profil",
                    link: "#!/profil"
                },
                {
                    text: "Admin",
                    link: "#!/admin"
                }
            ];

    });
