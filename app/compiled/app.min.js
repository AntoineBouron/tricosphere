var app = angular.module("tricosphere", [
    'ui.router',
    'angular-jwt',
    'ui.bootstrap',
    'angular-storage',
    'ui.router.state.events',
    'ngMessages'
]);



app.run(function($rootScope, $state) {
    $rootScope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
        console.log(from);
        $rootScope.prevState = from.name;
    });
});

/** TOKEN DANS LE HEADER **/
app.config(function Config($httpProvider, jwtInterceptorProvider, jwtOptionsProvider) {
    $httpProvider.interceptors.push('authInterceptor');
});

app.constant("config", {
    "url": "http://localhost/tricosphere",
    "api": "http://localhost/tricosphere/api/index.php"
});

/*app.filter('capitalize', function() {
    return function(input) {
      return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
    };
});
*/


/** INTERCEPTOR POUR LA GESTION DU TOKEN **/
// A chaque requete, on envoit le token  auth dans le header s'il existe et s'il est valide
// Sinon, on redirige vers la page /login
angular
    .module('tricosphere')
    .factory('authInterceptor', function($rootScope, $q, store, $state, jwtHelper) {
        return {
            // Add authorization jwt to headers
            request: function(config) {
                config.headers = config.headers || {};
                if (store.get('auth')) {
                    config.headers.Authorization = 'Bearer ' + store.get('auth');
                    //config.headers.Authorization = 'Content-Type : application/json';
                }
                return config;
            },
            // Intercept 401s and redirect you to login
            responseError: function(response) {
                if (response.status === 401) {
                    $state.go('login');
                    if (!store.get('auth') || jwtHelper.isTokenExpired(store.get('auth'))) {
                        store.remove('auth');
                    }
                    return $q.reject(response);
                } else if (response.status === 404) {
                    $state.go('404');
                } else {
                    return $q.reject(response);
                }
            }
        };
    });

/**
factory pour savoir si l'utilisateur est bien authentifié ou non
**/
angular
    .module('tricosphere')
    .factory('auth', function(store, jwtHelper, $state, $http, $q) {
        return {
            init: function(response) {
                var authJWT = store.get('auth') || null;
                if(null !== authJWT && !jwtHelper.isTokenExpired(authJWT)) {
                    $http({
                        method: 'GET',
                        url: 'http://localhost/tricosphere/api/index.php' + '/isValidToken'
                    }).then(function successCallback(response) {
                    }, function errorCallback(response) {
                        $state.go('login', {msg: 'Merci de vous athentifier.'});
                    });
                } else {
                    $state.go('login', {msg: 'Merci de vous athentifier.'});
                }
            },
            // sur la page de login, s'il exuste un token valide, alors on est redirigé vers la page home
            redirectOnLoginState: function() {
                var authJWT = store.get('auth') || null;
                if(null !== authJWT && !jwtHelper.isTokenExpired(authJWT)) {
                    $http({
                        method: 'GET',
                        url: 'http://localhost/tricosphere/api/index.php' + '/isValidToken'
                    }).then(function successCallback(response) {
                        $state.go('home', {msg: 'Welcome back!'});
                    }, function errorCallback(response) { });
                }
            },
            // exemple d'utilisation des promise
            linkOnUrlNotFound: function(response) {
                var deferred = $q.defer();
                $http({
                    method: 'GET',
                    url: 'http://localhost/tricosphere/api/index.php' + '/isValidToken'
                }).then(
                    function successCallback(response) { deferred.resolve(true); }, 
                    function errorCallback(response) { deferred.resolve(false); }
                );
                return deferred.promise;
            }
        };
    });

app.config(function($stateProvider, $locationProvider, $urlRouterProvider) {

/*    $urlRouterProvider.otherwise( function($injector, $location) {
        var $state = $injector.get('$state');
        $state.go('login');
    });*/

    // ROUTES PROTEGEES par un ngInit dans les controllers
    $stateProvider.state('home', {
        url: '/home',
        templateUrl: 'app/components/home/home.html',
        controller: 'HomeCtrl',
        params: {
            msg: null
        }
        // on peut faire des appels à des fonctions avant que le controller n'entre en action
        // on y accede dans le controller en injectant (ici isAuth ou simpleObj)
/*        resolve: {
            isAuth: function(auth) {
                return auth.init();
            },
            simpleObj:  function(){
                return {value: 'simple!'};
             }
        }   */
    });   

    $stateProvider
        .state('merceries', {
            url: '/merceries',
            templateUrl: 'app/components/merceries/merceries.html',
            controller: 'MerceriesCtrl'
        })
        .state('merceries.details', {
            url: '/details/:id',
            templateUrl: 'app/components/merceries/merceries.details.html'
        })
        .state('merceries.recherche', {
            url: '/recherche',
            templateUrl: 'app/components/merceries/merceries.recherche.html'
        });

    $stateProvider.state('settings', {
        url: '/settings',
        templateUrl: 'app/components/settings/settings.html',
        controller: 'SettingsCtrl'
    });


    $stateProvider.state('profil', {
        url: '/profil',
        templateUrl: 'app/components/profil/profil.html',
        controller: 'ProfilCtrl',
        params: {}
    });


    // ROUTES NON PROTEGEES
    $stateProvider.state('loginRoot', {
        url: '',
        templateUrl: 'app/components/login/login.html',
        controller: 'LoginCtrl'
    });

    $stateProvider.state('login', {
        url: '/login',
        templateUrl: 'app/components/login/login.html',
        controller: 'LoginCtrl',
        params : {
            msgErr : null,
            msgOk : null,
            userEmail: null,
            userPwd: null
        }
    });

    $stateProvider.state('resetPassword', {
        url: '/resetPassword',
        templateUrl: 'app/components/resetPassword/resetPassword.html',
        controller: 'ResetPasswordCtrl'
    });

    $stateProvider.state('signup', {
        url: '/signup',
        templateUrl: 'app/components/signup/signup.html',
        controller: 'SignupCtrl'
    });

    $stateProvider.state('404', {
        url: '/404',
        templateUrl: 'app/components/404/404.html',
        controller: '404Ctrl'
    });

    $urlRouterProvider.otherwise('/404');

    //$locationProvider.html5Mode(true).hashPrefix('!');
    //$locationProvider.hashPrefix('');
});


angular
    .module('tricosphere')
    .controller('404Ctrl', function($scope, $state, $rootScope, auth) {
    	
    	auth.init();

    	$scope.redirectLink = function(previousState) {
    		$state.go($rootScope.prevState);
    	};

    });

angular
    .module('tricosphere')
    .controller('HomeCtrl', function($rootScope, $scope, $http, store, $state, auth) {

        auth.init();

        $scope.getAllAcounts = function() {
            $http({
                method: 'GET',
                url: 'http://localhost/tricosphere/api/index.php' + '/toto'
            }).then(function successCallback(response) {
                console.log(response);
            }, function errorCallback(response) {
                console.log(response);
            });
        };

        $scope.removeAuth = function() {
            console.log('suppression du jwt \'auth\'');
            store.remove('auth');
        };

    });

angular
    .module('tricosphere')
    .controller('LoginCtrl', function($timeout, $scope, $state, store, $http, $stateParams, config, auth) {

        auth.redirectOnLoginState();

        // on recupere les data passés avec les state
        $scope.msgOk = $stateParams.msgOk || null;
        $scope.msgErr = $stateParams.msgErr || null;
        // effacement du message d'erreur / succes au bout define 3s
        if($scope.msgOk) { $timeout(function() { $scope.msgOk = null; }, 3000); }
        
        // lorsque qu'on est redirigé depuis la page signin
        //$scope.formLogin.data.email = $scope.userEmail ? $stateParams.userMail : null;
        //$scope.formLogin.data.pwd = $scope.userPwd ? $stateParams.userPwd : null;




        $scope.doLogin = function() {
            $http({
                method: 'POST',
                url: config.api + '/login',
                headers: {'Content-Type': 'application/json'},
                data: $scope.formLogin.data
            }).then(function successCallback(response) {
                store.set('auth', response.data.token);
                $state.go('home');
            }, function errorCallback(response) {
                $scope.msgErr = response.data.msg;
                $timeout(function() { $scope.msgErr = null; }, 3000);
            });
        };
    });

angular
    .module('tricosphere')
    .controller('MerceriesCtrl', function($rootScope, $scope, $http, store, $state, auth) {

        auth.init(); // page protégée

    // Recherche de merceries
        // par defaut, c'est la recherche par nom qui est selectionnée
        $scope.typeRechercheMercerie = "nom";



        $scope.merceries = [
            {
                id: 1,
                description: "Description de la mercerie n° 1",
                name: "azert",
                ville: "la rochelle"
            }, {
                id: 2,
                description: "Description de la mercerie n° 2",
                name: "qsdf",
                ville: "nantes"
            }, {
                id: 3,
                description: "Description de la mercerie n° 3",
                name: "wxcv",
                ville: "Lyon"
            }, {
                id: 4,
                description: "Description de la mercerie n° 4",
                name: "poiu",
                ville: "Strasbourg"
            }
        ];

        $scope.doRechercheMerceries = function() {

        };

});

angular
    .module('tricosphere')
    .controller('ProfilCtrl', function($scope, $http, $state, config, store, $stateParams) {

        
        
    });

angular
.module('tricosphere')
.controller('ResetPasswordCtrl', function($scope, $http, $state) {

	$scope.doResetPassword = function() {
		// TODO : reset Password via http POST
		$state.go('login');
	};
});
angular
    .module('tricosphere')
    .controller('SettingsCtrl', function($scope, auth) {

        auth.init();
        
    });

angular
    .module('tricosphere')
    .controller('SignupCtrl', function($scope, $http, $state, config, store, $stateParams) {


    	$scope.msg = null;

        $scope.doSignUp = function() {
        	console.log( $scope.formSignup.data);
            if ($scope.formSignup.pwd1 === $scope.formSignup.pwd2) {
                $http({
                    method: 'POST',
                    url: config.api + '/signup',
                    data: $scope.formSignup.data
                }).then(function successCallback(response) {
                    store.set('auth', response.data);
                    $state.go('login', {msgOk: response.data.msg, userEmail: $scope.formSignup.data.email, userPwd: $scope.formSignup.data.pwd1});
                    console.log(response);
                }, function errorCallback(response) {
                    console.log(response);
                });
            } else {
                $scope.msg = "Les deux mots de passe doivent être identiques";
            }
        };

        
    });

angular
    .module('tricosphere')
    .controller('NavbarCtrl', function($timeout, $scope, $state, store, $http, $stateParams, config) {

        $scope.doDeconnect = function() {
            store.remove('auth');
            $state.go('login', {msgOk: 'Vous avez bien été déconnecté'});
        };

        $scope.menuItems =  [
                {
                    text: "Merceries",
                    link: "#!/merceries",
                    icon: "shopping-basket"
                },
                {
                    text: "Designers",
                    link: "#!/designers",
                    icon: "pencil"
                },
                {
                    text: "Communauté",
                    link: "#!/community",
                    icon: "users"
                },
/*                {
                    text: "Réglages",
                    link: "#!/settings",
                    icon: "cogs"
                },*/
                {
                    text: "Profil",
                    link: "#!/profil",
                    icon: "user"
                },
                {
                    text: "Admin",
                    link: "#!/admin",
                    icon: "lock"
                }
            ];

    });
